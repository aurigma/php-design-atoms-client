<?php
/**
 * DesignAtomsServiceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\DesignAtoms
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DesignAtoms API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\DesignAtoms\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\DesignAtoms\ApiException;
use Aurigma\DesignAtoms\Configuration;
use Aurigma\DesignAtoms\HeaderSelector;
use Aurigma\DesignAtoms\ObjectSerializer;

/**
 * DesignAtomsServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\DesignAtoms
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DesignAtomsServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation designAtomsServiceConvertColors
     *
     * Converts colors
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ConvertColorsModel $convert_colors_model Convert colors operation parameters (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\Aurigma\DesignAtoms\Model\ProblemDetails
     */
    public function designAtomsServiceConvertColors($tenant_id = null, $convert_colors_model = null)
    {
        list($response) = $this->designAtomsServiceConvertColorsWithHttpInfo($tenant_id, $convert_colors_model);
        return $response;
    }

    /**
     * Operation designAtomsServiceConvertColorsWithHttpInfo
     *
     * Converts colors
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ConvertColorsModel $convert_colors_model Convert colors operation parameters (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\Aurigma\DesignAtoms\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceConvertColorsWithHttpInfo($tenant_id = null, $convert_colors_model = null)
    {
        $request = $this->designAtomsServiceConvertColorsRequest($tenant_id, $convert_colors_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceConvertColorsAsync
     *
     * Converts colors
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ConvertColorsModel $convert_colors_model Convert colors operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceConvertColorsAsync($tenant_id = null, $convert_colors_model = null)
    {
        return $this->designAtomsServiceConvertColorsAsyncWithHttpInfo($tenant_id, $convert_colors_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceConvertColorsAsyncWithHttpInfo
     *
     * Converts colors
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ConvertColorsModel $convert_colors_model Convert colors operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceConvertColorsAsyncWithHttpInfo($tenant_id = null, $convert_colors_model = null)
    {
        $returnType = 'mixed';
        $request = $this->designAtomsServiceConvertColorsRequest($tenant_id, $convert_colors_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceConvertColors'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ConvertColorsModel $convert_colors_model Convert colors operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceConvertColorsRequest($tenant_id = null, $convert_colors_model = null)
    {

        $resourcePath = '/api/atoms/v1/colorConverter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($convert_colors_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($convert_colors_model));
            } else {
                $httpBody = $convert_colors_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceCreateDesign
     *
     * Creates new design file with specified parameters and saves it in storage.
     *
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\CreateDesignModel $create_design_model Design creation parameters (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\DesignAtoms\Model\DesignInfo
     */
    public function designAtomsServiceCreateDesign($private_storage = null, $private_storage_owner = null, $tenant_id = null, $create_design_model = null)
    {
        list($response) = $this->designAtomsServiceCreateDesignWithHttpInfo($private_storage, $private_storage_owner, $tenant_id, $create_design_model);
        return $response;
    }

    /**
     * Operation designAtomsServiceCreateDesignWithHttpInfo
     *
     * Creates new design file with specified parameters and saves it in storage.
     *
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\CreateDesignModel $create_design_model Design creation parameters (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\DesignAtoms\Model\DesignInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceCreateDesignWithHttpInfo($private_storage = null, $private_storage_owner = null, $tenant_id = null, $create_design_model = null)
    {
        $request = $this->designAtomsServiceCreateDesignRequest($private_storage, $private_storage_owner, $tenant_id, $create_design_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\DesignAtoms\Model\DesignInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\DesignInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\DesignAtoms\Model\DesignInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\DesignInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceCreateDesignAsync
     *
     * Creates new design file with specified parameters and saves it in storage.
     *
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\CreateDesignModel $create_design_model Design creation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceCreateDesignAsync($private_storage = null, $private_storage_owner = null, $tenant_id = null, $create_design_model = null)
    {
        return $this->designAtomsServiceCreateDesignAsyncWithHttpInfo($private_storage, $private_storage_owner, $tenant_id, $create_design_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceCreateDesignAsyncWithHttpInfo
     *
     * Creates new design file with specified parameters and saves it in storage.
     *
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\CreateDesignModel $create_design_model Design creation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceCreateDesignAsyncWithHttpInfo($private_storage = null, $private_storage_owner = null, $tenant_id = null, $create_design_model = null)
    {
        $returnType = '\Aurigma\DesignAtoms\Model\DesignInfo';
        $request = $this->designAtomsServiceCreateDesignRequest($private_storage, $private_storage_owner, $tenant_id, $create_design_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceCreateDesign'
     *
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\CreateDesignModel $create_design_model Design creation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceCreateDesignRequest($private_storage = null, $private_storage_owner = null, $tenant_id = null, $create_design_model = null)
    {

        $resourcePath = '/api/atoms/v1/designs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($private_storage !== null) {
            if('form' === 'form' && is_array($private_storage)) {
                foreach($private_storage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['privateStorage'] = $private_storage;
            }
        }
        // query params
        if ($private_storage_owner !== null) {
            if('form' === 'form' && is_array($private_storage_owner)) {
                foreach($private_storage_owner as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['privateStorageOwner'] = $private_storage_owner;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_design_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_design_model));
            } else {
                $httpBody = $create_design_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceCreateItem
     *
     * Creates product item
     *
     * @param  \Aurigma\DesignAtoms\Model\ItemType $item_type Desired item type (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ItemSourceType $source_type source_type (optional)
     * @param  string $source_id Item source id, used if source type is &#39;ImageStorage&#39; or &#39;PrivateImageStorage&#39; (optional)
     * @param  string $source_owner_id Item source id, used if source type is &#39;PrivateImageStorage&#39; (optional)
     * @param  \SplFileObject $source_file Source file, used if source type is &#39;File&#39; (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\Aurigma\DesignAtoms\Model\ProblemDetails
     */
    public function designAtomsServiceCreateItem($item_type = null, $tenant_id = null, $source_type = null, $source_id = null, $source_owner_id = null, $source_file = null)
    {
        list($response) = $this->designAtomsServiceCreateItemWithHttpInfo($item_type, $tenant_id, $source_type, $source_id, $source_owner_id, $source_file);
        return $response;
    }

    /**
     * Operation designAtomsServiceCreateItemWithHttpInfo
     *
     * Creates product item
     *
     * @param  \Aurigma\DesignAtoms\Model\ItemType $item_type Desired item type (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ItemSourceType $source_type (optional)
     * @param  string $source_id Item source id, used if source type is &#39;ImageStorage&#39; or &#39;PrivateImageStorage&#39; (optional)
     * @param  string $source_owner_id Item source id, used if source type is &#39;PrivateImageStorage&#39; (optional)
     * @param  \SplFileObject $source_file Source file, used if source type is &#39;File&#39; (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\Aurigma\DesignAtoms\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceCreateItemWithHttpInfo($item_type = null, $tenant_id = null, $source_type = null, $source_id = null, $source_owner_id = null, $source_file = null)
    {
        $request = $this->designAtomsServiceCreateItemRequest($item_type, $tenant_id, $source_type, $source_id, $source_owner_id, $source_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceCreateItemAsync
     *
     * Creates product item
     *
     * @param  \Aurigma\DesignAtoms\Model\ItemType $item_type Desired item type (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ItemSourceType $source_type (optional)
     * @param  string $source_id Item source id, used if source type is &#39;ImageStorage&#39; or &#39;PrivateImageStorage&#39; (optional)
     * @param  string $source_owner_id Item source id, used if source type is &#39;PrivateImageStorage&#39; (optional)
     * @param  \SplFileObject $source_file Source file, used if source type is &#39;File&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceCreateItemAsync($item_type = null, $tenant_id = null, $source_type = null, $source_id = null, $source_owner_id = null, $source_file = null)
    {
        return $this->designAtomsServiceCreateItemAsyncWithHttpInfo($item_type, $tenant_id, $source_type, $source_id, $source_owner_id, $source_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceCreateItemAsyncWithHttpInfo
     *
     * Creates product item
     *
     * @param  \Aurigma\DesignAtoms\Model\ItemType $item_type Desired item type (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ItemSourceType $source_type (optional)
     * @param  string $source_id Item source id, used if source type is &#39;ImageStorage&#39; or &#39;PrivateImageStorage&#39; (optional)
     * @param  string $source_owner_id Item source id, used if source type is &#39;PrivateImageStorage&#39; (optional)
     * @param  \SplFileObject $source_file Source file, used if source type is &#39;File&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceCreateItemAsyncWithHttpInfo($item_type = null, $tenant_id = null, $source_type = null, $source_id = null, $source_owner_id = null, $source_file = null)
    {
        $returnType = 'mixed';
        $request = $this->designAtomsServiceCreateItemRequest($item_type, $tenant_id, $source_type, $source_id, $source_owner_id, $source_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceCreateItem'
     *
     * @param  \Aurigma\DesignAtoms\Model\ItemType $item_type Desired item type (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\ItemSourceType $source_type (optional)
     * @param  string $source_id Item source id, used if source type is &#39;ImageStorage&#39; or &#39;PrivateImageStorage&#39; (optional)
     * @param  string $source_owner_id Item source id, used if source type is &#39;PrivateImageStorage&#39; (optional)
     * @param  \SplFileObject $source_file Source file, used if source type is &#39;File&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceCreateItemRequest($item_type = null, $tenant_id = null, $source_type = null, $source_id = null, $source_owner_id = null, $source_file = null)
    {

        $resourcePath = '/api/atoms/v1/itemCreator';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_type !== null) {
            if('form' === 'form' && is_array($item_type)) {
                foreach($item_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['itemType'] = $item_type;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }



        // form params
        if ($source_type !== null) {
            $formParams['sourceType'] = ObjectSerializer::toFormValue($source_type);
        }
        // form params
        if ($source_id !== null) {
            $formParams['sourceId'] = ObjectSerializer::toFormValue($source_id);
        }
        // form params
        if ($source_owner_id !== null) {
            $formParams['sourceOwnerId'] = ObjectSerializer::toFormValue($source_owner_id);
        }
        // aurigmafix 5
        $multipart = true;
        // form params
        if ($source_file !== null) {
            $multipart = true;
            $formParams['sourceFile'] = [];
            $paramFiles = is_array($source_file) ? $source_file : [$source_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['sourceFile'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceDeleteDataSchema
     *
     * Deletes data schema from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function designAtomsServiceDeleteDataSchema($id, $tenant_id = null)
    {
        $this->designAtomsServiceDeleteDataSchemaWithHttpInfo($id, $tenant_id);
    }

    /**
     * Operation designAtomsServiceDeleteDataSchemaWithHttpInfo
     *
     * Deletes data schema from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceDeleteDataSchemaWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designAtomsServiceDeleteDataSchemaRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceDeleteDataSchemaAsync
     *
     * Deletes data schema from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceDeleteDataSchemaAsync($id, $tenant_id = null)
    {
        return $this->designAtomsServiceDeleteDataSchemaAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceDeleteDataSchemaAsyncWithHttpInfo
     *
     * Deletes data schema from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceDeleteDataSchemaAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '';
        $request = $this->designAtomsServiceDeleteDataSchemaRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceDeleteDataSchema'
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceDeleteDataSchemaRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceDeleteDataSchema'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceDeleteVdpData
     *
     * Deletes variable data printing inforamtion from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function designAtomsServiceDeleteVdpData($id, $tenant_id = null)
    {
        $this->designAtomsServiceDeleteVdpDataWithHttpInfo($id, $tenant_id);
    }

    /**
     * Operation designAtomsServiceDeleteVdpDataWithHttpInfo
     *
     * Deletes variable data printing inforamtion from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceDeleteVdpDataWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designAtomsServiceDeleteVdpDataRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceDeleteVdpDataAsync
     *
     * Deletes variable data printing inforamtion from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceDeleteVdpDataAsync($id, $tenant_id = null)
    {
        return $this->designAtomsServiceDeleteVdpDataAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceDeleteVdpDataAsyncWithHttpInfo
     *
     * Deletes variable data printing inforamtion from design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceDeleteVdpDataAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '';
        $request = $this->designAtomsServiceDeleteVdpDataRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceDeleteVdpData'
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceDeleteVdpDataRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceDeleteVdpData'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/vdpData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceLoadDataSchema
     *
     * Loads data schema from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Aurigma\DesignAtoms\Model\ProblemDetails|\Aurigma\DesignAtoms\Model\ProblemDetails
     */
    public function designAtomsServiceLoadDataSchema($id, $tenant_id = null)
    {
        list($response) = $this->designAtomsServiceLoadDataSchemaWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designAtomsServiceLoadDataSchemaWithHttpInfo
     *
     * Loads data schema from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Aurigma\DesignAtoms\Model\ProblemDetails|\Aurigma\DesignAtoms\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceLoadDataSchemaWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designAtomsServiceLoadDataSchemaRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceLoadDataSchemaAsync
     *
     * Loads data schema from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceLoadDataSchemaAsync($id, $tenant_id = null)
    {
        return $this->designAtomsServiceLoadDataSchemaAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceLoadDataSchemaAsyncWithHttpInfo
     *
     * Loads data schema from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceLoadDataSchemaAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->designAtomsServiceLoadDataSchemaRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceLoadDataSchema'
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceLoadDataSchemaRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceLoadDataSchema'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceLoadProduct
     *
     * Loads product from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be taken from private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\Aurigma\DesignAtoms\Model\ProblemDetails
     */
    public function designAtomsServiceLoadProduct($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null)
    {
        list($response) = $this->designAtomsServiceLoadProductWithHttpInfo($id, $private_storage, $private_storage_owner, $tenant_id);
        return $response;
    }

    /**
     * Operation designAtomsServiceLoadProductWithHttpInfo
     *
     * Loads product from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be taken from private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\Aurigma\DesignAtoms\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceLoadProductWithHttpInfo($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null)
    {
        $request = $this->designAtomsServiceLoadProductRequest($id, $private_storage, $private_storage_owner, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceLoadProductAsync
     *
     * Loads product from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be taken from private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceLoadProductAsync($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null)
    {
        return $this->designAtomsServiceLoadProductAsyncWithHttpInfo($id, $private_storage, $private_storage_owner, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceLoadProductAsyncWithHttpInfo
     *
     * Loads product from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be taken from private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceLoadProductAsyncWithHttpInfo($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null)
    {
        $returnType = 'mixed';
        $request = $this->designAtomsServiceLoadProductRequest($id, $private_storage, $private_storage_owner, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceLoadProduct'
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be taken from private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceLoadProductRequest($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceLoadProduct'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($private_storage !== null) {
            if('form' === 'form' && is_array($private_storage)) {
                foreach($private_storage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['privateStorage'] = $private_storage;
            }
        }
        // query params
        if ($private_storage_owner !== null) {
            if('form' === 'form' && is_array($private_storage_owner)) {
                foreach($private_storage_owner as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['privateStorageOwner'] = $private_storage_owner;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceLoadVdpData
     *
     * Loads variable data printing information from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\DesignAtoms\Model\VdpDataModel|\Aurigma\DesignAtoms\Model\ProblemDetails|\Aurigma\DesignAtoms\Model\ProblemDetails
     */
    public function designAtomsServiceLoadVdpData($id, $tenant_id = null)
    {
        list($response) = $this->designAtomsServiceLoadVdpDataWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designAtomsServiceLoadVdpDataWithHttpInfo
     *
     * Loads variable data printing information from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\DesignAtoms\Model\VdpDataModel|\Aurigma\DesignAtoms\Model\ProblemDetails|\Aurigma\DesignAtoms\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceLoadVdpDataWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designAtomsServiceLoadVdpDataRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\DesignAtoms\Model\VdpDataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\VdpDataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\DesignAtoms\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\DesignAtoms\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\DesignAtoms\Model\VdpDataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\VdpDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceLoadVdpDataAsync
     *
     * Loads variable data printing information from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceLoadVdpDataAsync($id, $tenant_id = null)
    {
        return $this->designAtomsServiceLoadVdpDataAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceLoadVdpDataAsyncWithHttpInfo
     *
     * Loads variable data printing information from design file taken from storage
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceLoadVdpDataAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\DesignAtoms\Model\VdpDataModel';
        $request = $this->designAtomsServiceLoadVdpDataRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceLoadVdpData'
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceLoadVdpDataRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceLoadVdpData'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/vdpData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceRenderProduct
     *
     * Render product proof image with specified parameters.
     *
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with unique filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\RenderProductModel $render_product_model Preview parameters (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function designAtomsServiceRenderProduct($attachment = null, $tenant_id = null, $render_product_model = null)
    {
        list($response) = $this->designAtomsServiceRenderProductWithHttpInfo($attachment, $tenant_id, $render_product_model);
        return $response;
    }

    /**
     * Operation designAtomsServiceRenderProductWithHttpInfo
     *
     * Render product proof image with specified parameters.
     *
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with unique filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\RenderProductModel $render_product_model Preview parameters (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceRenderProductWithHttpInfo($attachment = null, $tenant_id = null, $render_product_model = null)
    {
        $request = $this->designAtomsServiceRenderProductRequest($attachment, $tenant_id, $render_product_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceRenderProductAsync
     *
     * Render product proof image with specified parameters.
     *
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with unique filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\RenderProductModel $render_product_model Preview parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceRenderProductAsync($attachment = null, $tenant_id = null, $render_product_model = null)
    {
        return $this->designAtomsServiceRenderProductAsyncWithHttpInfo($attachment, $tenant_id, $render_product_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceRenderProductAsyncWithHttpInfo
     *
     * Render product proof image with specified parameters.
     *
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with unique filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\RenderProductModel $render_product_model Preview parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceRenderProductAsyncWithHttpInfo($attachment = null, $tenant_id = null, $render_product_model = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->designAtomsServiceRenderProductRequest($attachment, $tenant_id, $render_product_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceRenderProduct'
     *
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with unique filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\RenderProductModel $render_product_model Preview parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceRenderProductRequest($attachment = null, $tenant_id = null, $render_product_model = null)
    {

        $resourcePath = '/api/atoms/v1/renderer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($attachment !== null) {
            if('form' === 'form' && is_array($attachment)) {
                foreach($attachment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['attachment'] = $attachment;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($render_product_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($render_product_model));
            } else {
                $httpBody = $render_product_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceSaveDataSchema
     *
     * Saves data schema to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \SplFileObject $schema Data schema binary file (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function designAtomsServiceSaveDataSchema($id, $tenant_id = null, $schema = null)
    {
        $this->designAtomsServiceSaveDataSchemaWithHttpInfo($id, $tenant_id, $schema);
    }

    /**
     * Operation designAtomsServiceSaveDataSchemaWithHttpInfo
     *
     * Saves data schema to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \SplFileObject $schema Data schema binary file (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceSaveDataSchemaWithHttpInfo($id, $tenant_id = null, $schema = null)
    {
        $request = $this->designAtomsServiceSaveDataSchemaRequest($id, $tenant_id, $schema);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceSaveDataSchemaAsync
     *
     * Saves data schema to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \SplFileObject $schema Data schema binary file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceSaveDataSchemaAsync($id, $tenant_id = null, $schema = null)
    {
        return $this->designAtomsServiceSaveDataSchemaAsyncWithHttpInfo($id, $tenant_id, $schema)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceSaveDataSchemaAsyncWithHttpInfo
     *
     * Saves data schema to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \SplFileObject $schema Data schema binary file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceSaveDataSchemaAsyncWithHttpInfo($id, $tenant_id = null, $schema = null)
    {
        $returnType = '';
        $request = $this->designAtomsServiceSaveDataSchemaRequest($id, $tenant_id, $schema);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceSaveDataSchema'
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \SplFileObject $schema Data schema binary file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceSaveDataSchemaRequest($id, $tenant_id = null, $schema = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceSaveDataSchema'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // aurigmafix 5
        $multipart = true;
        // form params
        if ($schema !== null) {
            $multipart = true;
            $formParams['schema'] = [];
            $paramFiles = is_array($schema) ? $schema : [$schema];
            foreach ($paramFiles as $paramFile) {
                $formParams['schema'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceSaveProduct
     *
     * Saves product to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  mixed $body Serialized product description (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function designAtomsServiceSaveProduct($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null, $body = null)
    {
        $this->designAtomsServiceSaveProductWithHttpInfo($id, $private_storage, $private_storage_owner, $tenant_id, $body);
    }

    /**
     * Operation designAtomsServiceSaveProductWithHttpInfo
     *
     * Saves product to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  mixed $body Serialized product description (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceSaveProductWithHttpInfo($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null, $body = null)
    {
        $request = $this->designAtomsServiceSaveProductRequest($id, $private_storage, $private_storage_owner, $tenant_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceSaveProductAsync
     *
     * Saves product to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  mixed $body Serialized product description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceSaveProductAsync($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null, $body = null)
    {
        return $this->designAtomsServiceSaveProductAsyncWithHttpInfo($id, $private_storage, $private_storage_owner, $tenant_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceSaveProductAsyncWithHttpInfo
     *
     * Saves product to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  mixed $body Serialized product description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceSaveProductAsyncWithHttpInfo($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null, $body = null)
    {
        $returnType = '';
        $request = $this->designAtomsServiceSaveProductRequest($id, $private_storage, $private_storage_owner, $tenant_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceSaveProduct'
     *
     * @param  string $id Design identifier (required)
     * @param  bool $private_storage If set to &#39;true&#39; design will be saved to private storage (optional)
     * @param  string $private_storage_owner Private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  mixed $body Serialized product description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceSaveProductRequest($id, $private_storage = null, $private_storage_owner = null, $tenant_id = null, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceSaveProduct'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($private_storage !== null) {
            if('form' === 'form' && is_array($private_storage)) {
                foreach($private_storage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['privateStorage'] = $private_storage;
            }
        }
        // query params
        if ($private_storage_owner !== null) {
            if('form' === 'form' && is_array($private_storage_owner)) {
                foreach($private_storage_owner as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['privateStorageOwner'] = $private_storage_owner;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designAtomsServiceSaveVdpData
     *
     * Saves variable data printing information to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\VdpDataModel $vdp_data_model Serialized vdp data (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function designAtomsServiceSaveVdpData($id, $tenant_id = null, $vdp_data_model = null)
    {
        $this->designAtomsServiceSaveVdpDataWithHttpInfo($id, $tenant_id, $vdp_data_model);
    }

    /**
     * Operation designAtomsServiceSaveVdpDataWithHttpInfo
     *
     * Saves variable data printing information to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\VdpDataModel $vdp_data_model Serialized vdp data (optional)
     *
     * @throws \Aurigma\DesignAtoms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function designAtomsServiceSaveVdpDataWithHttpInfo($id, $tenant_id = null, $vdp_data_model = null)
    {
        $request = $this->designAtomsServiceSaveVdpDataRequest($id, $tenant_id, $vdp_data_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\DesignAtoms\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designAtomsServiceSaveVdpDataAsync
     *
     * Saves variable data printing information to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\VdpDataModel $vdp_data_model Serialized vdp data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceSaveVdpDataAsync($id, $tenant_id = null, $vdp_data_model = null)
    {
        return $this->designAtomsServiceSaveVdpDataAsyncWithHttpInfo($id, $tenant_id, $vdp_data_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designAtomsServiceSaveVdpDataAsyncWithHttpInfo
     *
     * Saves variable data printing information to design file and updates design in storage.
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\VdpDataModel $vdp_data_model Serialized vdp data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designAtomsServiceSaveVdpDataAsyncWithHttpInfo($id, $tenant_id = null, $vdp_data_model = null)
    {
        $returnType = '';
        $request = $this->designAtomsServiceSaveVdpDataRequest($id, $tenant_id, $vdp_data_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designAtomsServiceSaveVdpData'
     *
     * @param  string $id Design identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\DesignAtoms\Model\VdpDataModel $vdp_data_model Serialized vdp data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designAtomsServiceSaveVdpDataRequest($id, $tenant_id = null, $vdp_data_model = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designAtomsServiceSaveVdpData'
            );
        }

        $resourcePath = '/api/atoms/v1/designs/{id}/vdpData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($vdp_data_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($vdp_data_model));
            } else {
                $httpBody = $vdp_data_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
